@model GameManagementMvc.Models.GameViewModel

@{
ViewData["Title"] = "All Games";
bool hasTitle = !String.IsNullOrEmpty(Model.Title);
bool hasGenreId = Model.GenreId.HasValue;
bool hasCompanyId = Model.CompanyId.HasValue;
bool hasRating = Model.Rating.HasValue;
var games = Model.Games!;
}

<h1>
    @if (hasTitle || hasGenreId || hasCompanyId || hasRating)
    {
    <span>&lt; </span> <a asp-action="Index" class="text-black">Back</a>
    }
    else
    {
    <p>@ViewData["Title"]</p>
    }
</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form asp-controller="Game" asp-action="Index" method="get">
    <p>
        Company: 
        <select asp-for="CompanyId" asp-items="@Model.Companies">
            <option value="">All</option>
        </select>
        Genre: 
        <select asp-for="GenreId" asp-items="@Model.Genres">
            <option value="">All</option>
        </select>
        Rating: 
        <select asp-for="Rating">
            <option value="">All</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
        </select>
        Sort by: 
        <select asp-for="Sort">
            <option value="">All</option>
            <option value="name">Name Increase</option>
            <option value="-name">Name Decrease</option>
            <option value="rating">Rating Increase</option>
            <option value="-rating">Rating Decrease</option>
            <option value="date">Date Increase</option>
            <option value="-date">Date Decrease</option>
        </select>
        Title: <input type="text" asp-for="Title" value="@Model.Title">
        <input type="submit" value="Filter" class="">
    </p>
</form>

<table class="table">
    <!--TODO: check if !games.Any() and display other <thead> and <tbody> 
with a message instead of straight games[0] which can throw error when 
games.Count == 0-->
    <thead class="text-nowrap">
        <tr>
            <th>
                @Html.DisplayNameFor(_ => games[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(_ => games[0].Rating)
            </th>
            <th>
                @Html.DisplayNameFor(_ => games[0].ReleaseDate)
            </th>
            <th>
                Phases
            </th>
            <th>
                Genres
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in games) {
        var gameCompanies = item.GameCompanies.ToList();
        var gameGenres = item.GameGenres.ToList();
        <tr>
            <td>
                @Html.DisplayFor(_ => item.Title)
            </td>
            <td>
                @Html.DisplayFor(_ => item.Rating)
            </td>
            <td>
                @Html.DisplayFor(_ => item.ReleaseDate)
            </td>
            <td>
                @foreach (var gc in gameCompanies)
                {
                <a asp-controller="Company" asp-action="Details" asp-route-id="@gc.Company.Id">@Html.DisplayFor(_ => gc.Company.Title)</a>
                <span> | </span>
                }
            </td>
            <td>
                @foreach (var gg in gameGenres)
                {
                <a asp-controller="Genre" asp-action="Details" asp-route-id="@gg.Genre.Id">@Html.DisplayFor(_ => gg.Genre.Title)</a>
                <span> | </span>
                }
            </td>
            <td class="text-nowrap">
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
        }
    </tbody>
</table>
